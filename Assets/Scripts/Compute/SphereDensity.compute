#pragma kernel Density
#include "Includes/Density.compute"
#include "Includes/Noise.compute"

float radius;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseHeightMultiplier;

float wormNoise = 0;
float wormFrequency = 2.0;
float wormAmplitude = 1.0;
float wormRadius = 70.0;
float wormLength = 30.0;
float wormDensity = 0.5;

float fbm(int octaves, float lacunarity, float persistence, float scale, float3 pos) {
    float noise = 0;
    float frequency = scale / 100;
    float amplitude = 1;

    for (int i = 0; i < octaves; i ++) {
        float n = 1-abs(snoise(pos * frequency)*2-1);
        //n*=n;
        noise += n * amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return noise;
}

[numthreads(numThreads,numThreads,numThreads)]
void Density (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }

    float3 pos = centre + id * spacing - boundsSize/2;
    
    float density = radius - length(pos + offset);
    float noise = fbm(octaves, lacunarity, persistence, noiseScale, pos) * noiseHeightMultiplier;
    density += noise;
    
    
    int index = indexFromCoord(id.x,id.y,id.z);
    points[index] = float4(pos, density);
}
